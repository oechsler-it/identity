// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/oechsler-it/identity/fiber"
	"github.com/oechsler-it/identity/gorm"
	"github.com/oechsler-it/identity/modules"
	fiber3 "github.com/oechsler-it/identity/modules/middleware/infra/fiber"
	"github.com/oechsler-it/identity/modules/permission"
	app4 "github.com/oechsler-it/identity/modules/permission/app"
	fiber6 "github.com/oechsler-it/identity/modules/permission/infra/fiber"
	hook2 "github.com/oechsler-it/identity/modules/permission/infra/hook"
	model4 "github.com/oechsler-it/identity/modules/permission/infra/model"
	"github.com/oechsler-it/identity/modules/session"
	"github.com/oechsler-it/identity/modules/session/app"
	fiber4 "github.com/oechsler-it/identity/modules/session/infra/fiber"
	"github.com/oechsler-it/identity/modules/session/infra/fiber/middleware"
	"github.com/oechsler-it/identity/modules/session/infra/model"
	service2 "github.com/oechsler-it/identity/modules/session/infra/service"
	"github.com/oechsler-it/identity/modules/token"
	app3 "github.com/oechsler-it/identity/modules/token/app"
	fiber2 "github.com/oechsler-it/identity/modules/token/infra/fiber"
	middleware3 "github.com/oechsler-it/identity/modules/token/infra/fiber/middleware"
	model3 "github.com/oechsler-it/identity/modules/token/infra/model"
	"github.com/oechsler-it/identity/modules/user"
	app2 "github.com/oechsler-it/identity/modules/user/app"
	fiber5 "github.com/oechsler-it/identity/modules/user/infra/fiber"
	middleware2 "github.com/oechsler-it/identity/modules/user/infra/fiber/middleware"
	"github.com/oechsler-it/identity/modules/user/infra/hook"
	model2 "github.com/oechsler-it/identity/modules/user/infra/model"
	"github.com/oechsler-it/identity/modules/user/infra/service"
	"github.com/oechsler-it/identity/runtime"
	"github.com/oechsler-it/identity/swagger"
	"github.com/oechsler-it/identity/validator"
)

// Injectors from wire.go:

func New() *App {
	hooks := runtime.NewHooks()
	env := runtime.NewEnv()
	logger := runtime.NewLogger(env)
	runtimeRuntime := runtime.NewRuntime(hooks, logger)
	fiberApp := fiber.NewFiber(env, logger)
	quicFiber := fiber.NewQUICFiber(fiberApp)
	options := &fiber.Options{
		Env:     env,
		Hooks:   hooks,
		Logger:  logger,
		App:     fiberApp,
		QuicApp: quicFiber,
	}
	swaggerOptions := &swagger.Options{
		App: fiberApp,
	}
	validate := validator.New()
	gormOptions := &gorm.Options{
		Hooks:  hooks,
		Env:    env,
		Logger: logger,
	}
	db := gorm.NewPostgres(gormOptions)
	gormSessionRepo := model.NewGormSessionRepo(db, logger, hooks)
	renewHandler := app.NewRenewHandler(validate, gormSessionRepo)
	renewMiddleware := &middleware.RenewMiddleware{
		Logger: logger,
		Env:    env,
		Renew:  renewHandler,
	}
	verifyActiveHandler := app.NewVerifyActiveHandler(gormSessionRepo)
	sessionAuthMiddleware := &middleware.SessionAuthMiddleware{
		VerifyActive: verifyActiveHandler,
	}
	gormUserRepo := model2.NewGormUserRepo(db, logger, hooks)
	findByIdentifierHandler := app2.NewFindByIdentifierHandler(gormUserRepo)
	userMiddleware := &middleware2.UserMiddleware{
		FindById: findByIdentifierHandler,
	}
	userPermissionMiddleware := &middleware2.UserPermissionMiddleware{}
	gormTokenRepo := model3.NewGormTokenRepo(db, logger, hooks)
	issueHandler := app3.NewIssueTokenHandler(validate, gormTokenRepo)
	issueTokenHandler := &fiber2.IssueTokenHandler{
		App:                      fiberApp,
		Logger:                   logger,
		Validate:                 validate,
		Env:                      env,
		RenewMiddleware:          renewMiddleware,
		SessionAuthMiddleware:    sessionAuthMiddleware,
		UserMiddleware:           userMiddleware,
		UserPermissionMiddleware: userPermissionMiddleware,
		Repo:                     gormTokenRepo,
		Issue:                    issueHandler,
	}
	authenticatedMiddleware := &fiber3.AuthenticatedMiddleware{}
	findByOwnerUserIdHandler := app3.NewFindByOwnerUserIdHandler(gormTokenRepo)
	activeTokensHandler := &fiber2.ActiveTokensHandler{
		App:                     fiberApp,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindByOwnerUserId:       findByOwnerUserIdHandler,
	}
	appVerifyActiveHandler := app3.NewVerifyActiveHandler(gormTokenRepo)
	tokenAuthMiddleware := &middleware3.TokenAuthMiddleware{
		VerifyActive: appVerifyActiveHandler,
	}
	findByIdPartialHandler := app3.NewFindByIdPartialHandler(gormTokenRepo)
	tokenByIdHandler := &fiber2.TokenByIdHandler{
		App:                     fiberApp,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindByIdPartial:         findByIdPartialHandler,
	}
	verifyHasPermissionHandler := app3.NewVerifyHasPermissionHandler(gormTokenRepo)
	hasPermissionHandler := &fiber2.HasPermissionHandler{
		App:                     fiberApp,
		Logger:                  logger,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		Has:                     verifyHasPermissionHandler,
	}
	tokenPermissionMiddleware := &middleware3.TokenPermissionMiddleware{}
	authorizedMiddleware := &fiber3.AuthorizedMiddleware{}
	revokeHandler := app3.NewRevokeHandler(validate, gormTokenRepo)
	revokeTokenHandler := &fiber2.RevokeTokenHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Revoke:                    revokeHandler,
	}
	findByIdHandler := app3.NewFindByIdHandler(gormTokenRepo)
	tokenMiddleware := &middleware3.TokenMiddleware{
		App:      fiberApp,
		FindById: findByIdHandler,
	}
	tokenOptions := &token.Options{
		IssueTokenHandler:    issueTokenHandler,
		ActiveTokensHandler:  activeTokensHandler,
		TokenByIdHandler:     tokenByIdHandler,
		HasPermissionHandler: hasPermissionHandler,
		RevokeTokenHandler:   revokeTokenHandler,
		TokenIdMiddleware:    tokenMiddleware,
	}
	deviceIdMiddleware := &middleware.DeviceIdMiddleware{
		App:    fiberApp,
		Logger: logger,
	}
	appFindByIdHandler := app.NewFindByIdHandler(gormSessionRepo)
	sessionMiddleware := &middleware.SessionMiddleware{
		App:      fiberApp,
		FindById: appFindByIdHandler,
	}
	initiateHandler := app.NewInitiateHandler(validate, gormSessionRepo)
	argon2idPasswordService := service.NewArgon2idPasswordService()
	verifyPasswordHandler := app2.NewVerifyPasswordHandler(argon2idPasswordService, gormUserRepo)
	loginHandler := &fiber4.LoginHandler{
		App:                  fiberApp,
		Logger:               logger,
		Env:                  env,
		Model:                gormSessionRepo,
		Initiate:             initiateHandler,
		FindUserByIdentifier: findByIdentifierHandler,
		VerifyPassword:       verifyPasswordHandler,
	}
	appVerifyHasPermissionHandler := app2.NewVerifyHasPermissionHandler(gormUserRepo)
	userDomainPermissionService := service2.NewUserDomainPermissionService(appVerifyHasPermissionHandler)
	appRevokeHandler := app.NewRevokeHandler(validate, gormSessionRepo, userDomainPermissionService)
	logoutHandler := &fiber4.LogoutHandler{
		App:                     fiberApp,
		Logger:                  logger,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindById:                appFindByIdHandler,
		Revoke:                  appRevokeHandler,
	}
	revokeSessionHandler := &fiber4.RevokeSessionHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Revoke:                    appRevokeHandler,
	}
	appFindByOwnerUserIdHandler := app.NewFindByOwnerUserIdHandler(gormSessionRepo)
	activeSessionsHandler := &fiber4.ActiveSessionsHandler{
		App:                     fiberApp,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindByOwnerUserId:       appFindByOwnerUserIdHandler,
	}
	activeSessionHandler := &fiber4.ActiveSessionHandler{
		App:                     fiberApp,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindById:                appFindByIdHandler,
	}
	sessionByIdHandler := &fiber4.SessionByIdHandler{
		App:                     fiberApp,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindById:                appFindByIdHandler,
	}
	sessionOptions := &session.Options{
		DeviceIdMiddleware:    deviceIdMiddleware,
		SessionIdMiddleware:   sessionMiddleware,
		LoginHandler:          loginHandler,
		LogoutHandler:         logoutHandler,
		RevokeSessionHandler:  revokeSessionHandler,
		ActiveSessionsHandler: activeSessionsHandler,
		ActiveSessionHandler:  activeSessionHandler,
		SessionByIdHandler:    sessionByIdHandler,
	}
	verifyNoUserExistsHandler := app2.NewVerifyNoUserExistsHandler(gormUserRepo)
	createHandler := app2.NewCreateHandler(validate, argon2idPasswordService, gormUserRepo)
	gormPermissionRepo := model4.NewGormPermissionRepo(db, logger, hooks)
	findByNameHandler := app4.NewFindByNameHandler(gormPermissionRepo)
	grantPermissionHandler := app2.NewGrantPermissionHandler(findByNameHandler, validate, gormUserRepo)
	createRootUser := &hook.CreateRootUser{
		Hooks:                hooks,
		Logger:               logger,
		Env:                  env,
		Repo:                 gormUserRepo,
		VerifyNoUserExists:   verifyNoUserExistsHandler,
		Create:               createHandler,
		FindPermissionByName: findByNameHandler,
		Grant:                grantPermissionHandler,
	}
	createUserHandler := &fiber5.CreateUserHandler{
		App:                       fiberApp,
		Logger:                    logger,
		Validate:                  validate,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Repo:                      gormUserRepo,
		Create:                    createHandler,
	}
	deleteHandler := app2.NewDeleteHandler(gormUserRepo)
	deleteMeHandler := &fiber5.DeleteMeHandler{
		App:                     fiberApp,
		Logger:                  logger,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		UserMiddleware:          userMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		Delete:                  deleteHandler,
	}
	deleteUserHandler := &fiber5.DeleteUserHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Delete:                    deleteHandler,
	}
	meHandler := &fiber5.MeHandler{
		App:                     fiberApp,
		Logger:                  logger,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		UserMiddleware:          userMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
	}
	userByIdHandler := &fiber5.UserByIdHandler{
		App:                     fiberApp,
		Logger:                  logger,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindByIdentifier:        findByIdentifierHandler,
	}
	fiberGrantPermissionHandler := &fiber5.GrantPermissionHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Grant:                     grantPermissionHandler,
	}
	revokePermissionHandler := app2.NewRevokePermissionHandler(validate, gormUserRepo)
	fiberRevokePermissionHandler := &fiber5.RevokePermissionHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Revoke:                    revokePermissionHandler,
	}
	fiberHasPermissionHandler := &fiber5.HasPermissionHandler{
		App:                     fiberApp,
		Logger:                  logger,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		Has:                     appVerifyHasPermissionHandler,
	}
	userOptions := &user.Options{
		CreateRootUser:   createRootUser,
		CreateUser:       createUserHandler,
		DeleteMe:         deleteMeHandler,
		DeleteUser:       deleteUserHandler,
		Me:               meHandler,
		UserById:         userByIdHandler,
		GrantPermission:  fiberGrantPermissionHandler,
		RevokePermission: fiberRevokePermissionHandler,
		HasPermission:    fiberHasPermissionHandler,
	}
	verifyPermissionNotExistsHandler := app4.NewVerifyPermissionNotExistsHandler(gormPermissionRepo)
	appCreateHandler := app4.NewCreateHandler(validate, gormPermissionRepo)
	createBasePermissions := &hook2.CreateBasePermissions{
		Hooks:                     hooks,
		Logger:                    logger,
		Env:                       env,
		VerifyPermissionNotExists: verifyPermissionNotExistsHandler,
		Create:                    appCreateHandler,
	}
	fiberCreateHandler := &fiber6.CreateHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Create:                    appCreateHandler,
	}
	appDeleteHandler := app4.NewDeleteHandler(gormPermissionRepo)
	fiberDeleteHandler := &fiber6.DeleteHandler{
		App:                       fiberApp,
		Logger:                    logger,
		TokenAuthMiddleware:       tokenAuthMiddleware,
		TokenPermissionMiddleware: tokenPermissionMiddleware,
		RenewMiddleware:           renewMiddleware,
		SessionAuthMiddleware:     sessionAuthMiddleware,
		UserMiddleware:            userMiddleware,
		UserPermissionMiddleware:  userPermissionMiddleware,
		AuthenticatedMiddleware:   authenticatedMiddleware,
		AuthorizedMiddleware:      authorizedMiddleware,
		Delete:                    appDeleteHandler,
	}
	findAllHandler := app4.NewFindAllHandler(gormPermissionRepo)
	permissionsHandler := &fiber6.PermissionsHandler{
		App:                     fiberApp,
		TokenAuthMiddleware:     tokenAuthMiddleware,
		RenewMiddleware:         renewMiddleware,
		SessionAuthMiddleware:   sessionAuthMiddleware,
		AuthenticatedMiddleware: authenticatedMiddleware,
		FindAll:                 findAllHandler,
	}
	permissionOptions := &permission.Options{
		CreateBasePermissions: createBasePermissions,
		CreateHandler:         fiberCreateHandler,
		DeleteHandler:         fiberDeleteHandler,
		PermissionsHandler:    permissionsHandler,
	}
	modulesOptions := &modules.Options{
		App:        fiberApp,
		Token:      tokenOptions,
		Session:    sessionOptions,
		User:       userOptions,
		Permission: permissionOptions,
	}
	appOptions := &Options{
		Runtime: runtimeRuntime,
		Logger:  logger,
		Fiber:   options,
		Swagger: swaggerOptions,
		Modules: modulesOptions,
	}
	appApp := newApp(appOptions)
	return appApp
}
